TSharedRef<SWidget> SBottomBuildingsPanel::Design1()
{
	
	SAssignNew(SizeBox,SBox)// Set the height of the scrollable box
	.HAlign(HAlign_Fill)
	.VAlign(VAlign_Bottom)
	[
		SNew(SScrollBox)
		.Orientation(Orient_Horizontal) // Set the orientation of the scroll box to horizontal
		
		+SScrollBox::Slot() // Add a slot to the scroll box
		.HAlign(HAlign_Fill) // Align the slot horizontally
		.VAlign(VAlign_Fill) // Align the slot vertically
		[
		SAssignNew(ImageWidget,SImage)
		.Image(BGBrush.Get())
		]
		
	];
	return SizeBox.ToSharedRef();
}

TSharedRef<SWidget> SBottomBuildingsPanel::Design2()
{

	SAssignNew(SizeBox,SBox);
	/*.WidthOverride(SizeboxSize.X) 
		.HeightOverride(SizeboxSize.Y)
		.HAlign(HAlign_Fill)
		.VAlign(VAlign_Fill)
	[
	SNew(SBorder)
		.Padding(0.0f)
		.BorderBackgroundColor(FLinearColor::Blue)
		.HAlign(HAlign_Fill)
		.VAlign(VAlign_Fill)
		[					
			SAssignNew(RootHorizontalBox,SHorizontalBox)
			.Tag(TEXT("RootBox"))
		
			+SHorizontalBox::Slot()
				.HAlign(HAlign_Fill)
				.VAlign(VAlign_Fill)
				.MaxWidth(SizeboxSize.X/2)
				.Padding(10.0f)
				[
						SNew(SOverlay)
						+ SOverlay::Slot()
						.HAlign(HAlign_Fill)
						.VAlign(VAlign_Fill)
						[
							SNew(SImage)
									.ColorAndOpacity(FLinearColor(0.5f,1.0f,0.5f,1.0f))
							.Image(BGBrush.Get())
						]
						+ SOverlay::Slot()
						.HAlign(HAlign_Fill)
						.VAlign(VAlign_Fill)
						[
							SNew(SBorder)
							   .Padding(0.0f)
							   .BorderBackgroundColor(FLinearColor::Green)
							   .HAlign(HAlign_Center)
							   .VAlign(VAlign_Center)
							   [
									SNew(STextBlock)
									.Text("SLOT 1")
							   ]
						]
							
				]


				+SHorizontalBox::Slot()
					.HAlign(HAlign_Fill)
					.VAlign(VAlign_Fill)
					.MaxWidth(SizeboxSize.X/2)
					.Padding(5.0f)
					[
						SNew(SOverlay)
							+ SOverlay::Slot()
							.HAlign(HAlign_Fill)
							.VAlign(VAlign_Fill)
							[
								SNew(SImage)
								.ColorAndOpacity(FLinearColor(0.5f,1.0f,0.5f,1.0f))
								.Image(BGBrush.Get())
							]
							+ SOverlay::Slot()
							.HAlign(HAlign_Fill)
							.VAlign(VAlign_Fill)
							[
								SNew(SBorder)
								   .Padding(0.0f)
								   .BorderBackgroundColor(FLinearColor::Green)
								   .HAlign(HAlign_Center)
								   .VAlign(VAlign_Center)
								   [
										SNew(STextBlock)
										.Text("SLOT 2")
								   ]
							]
					]


		]
	];


	/*
TSharedPtr<SHorizontalBox>HBox;
	SAssignNew( HBox,SHorizontalBox)
	+ SHorizontalBox::Slot()
	.HAlign(HAlign_Center)
	.VAlign(VAlign_Center)
			.AutoWidth()
			[
			
			SAssignNew(ImageWidget,SImage)
				.Image(BGBrush.Get())
			];

	return HBox.ToSharedRef();*/

	return SizeBox.ToSharedRef();
}

TSharedRef<SWidget> SBottomBuildingsPanel::Design3()
{
		TSharedPtr<SScrollBox>ScrollBox1;

			SAssignNew(ScrollBox1,SScrollBox);

	/*
		+SScrollBox::Slot() .Padding(10,5)
		[
			SNew(SHorizontalBox)
			+SHorizontalBox::Slot() .HAlign(HAlign_Left)
			[
				...
			]
			+SHorizontalBox::Slot() .HAlign(HAlign_Center)
			[
				...
			]
			+SHorizontalBox::Slot() .HAlign(HAlign_Right)
			[
				...
			]
		]
		+SScrollBox::Slot() .Padding(10,5)
		[
			SNew(SHorizontalBox)
			+SHorizontalBox::Slot() .FillWidth(2)
			[
				...
			]
			+SHorizontalBox::Slot() .FillWidth(1)
			[
				...
			]
			+SHorizontalBox::Slot() .FillWidth(3)
			[
				...
			]
		]*/

	return ScrollBox1.ToSharedRef();
}


//sync 

	if(BottomPanelWidget.IsValid())
	{
		BottomPanelWidget->SetBrush(BackgroundBrush);
		BottomPanelWidget->SetSize(SizeBoxSize);
		//SetWidgetAttribute(*BottomPanelWidget,BottomPanelWidget->TSize,Size_SizeBox,EInvalidateWidgetReason::LayoutAndVolatility );
		//SetWidgetAttribute(*BottomPanelWidget,BottomPanelWidget->BGBrush,BackgroundBrush,EInvalidateWidgetReason::LayoutAndVolatility );
			FString SizeBoxSizeString = BottomPanelWidget->TSize.Get().ToString();
        	FColor MessageColor = FColor::Yellow;
        	float DisplayTime = 2.0f;
        	int32 Key = -1; // Automatically assigned key
        	GEngine->AddOnScreenDebugMessage(Key, DisplayTime, MessageColor, SizeBoxSizeString);
        	FString SizeBoxSizeString = BottomPanelWidget->TSize.Get().ToString();
        	GEngine->AddOnScreenDebugMessage(-1, 5.0f, MessageColor, SizeBoxSizeString);
	}
	else
	{
		FString SizeBoxSizeString ="WIDGET CREATION FAILED";
		FColor MessageColor = FColor::Yellow;
		float DisplayTime = 2.0f;
		int32 Key = -1; // Automatically assigned key
		GEngine->AddOnScreenDebugMessage(Key, DisplayTime, FColor::Yellow, SizeBoxSizeString);
	}
	
	
	
	
	TSharedRef<SWidget> SBottomBuildingsPanel::BuildUI()
    {
    
    	TSharedPtr<SOverlay>RootOverlay;
    	SAssignNew(RootOverlay,SOverlay)
    	+ SOverlay::Slot()
    			.HAlign(HAlign_Center)
    			.VAlign(VAlign_Bottom) // Changed from VAlign_Center
    		[
    			SAssignNew(SizeBox,SBox)
    			.WidthOverride_Lambda([this]() -> FOptionalSize {
    			// Retrieve the current value of Size_BoxWidth attribute
    			return Size_BoxWidth.Get();
    		})
    		.HeightOverride_Lambda([this]() -> FOptionalSize {
    			// Retrieve the current value of Size_BoxHeight attribute
    			return Size_BoxHeight.Get();
    		})
    				[
    					SAssignNew(ImageWidget,SImage)
    						.Image(BGBrush.Get())
    				]
    		];
    
    	return RootOverlay.ToSharedRef();
    }
    
    
    	TSharedPtr<FSlateBrush> Convert_UT2D_SlateBrush(UTexture2D* NewImage);
    	
    	TSharedPtr<FSlateBrush> UTestUMG::Convert_UT2D_SlateBrush(UTexture2D* NewImage)
        {
        	FSlateBrush* Brush = new FSlateBrush();
        	Brush->SetResourceObject(NewImage);
        	TSharedPtr<FSlateBrush>  Image  =MakeShareable(Brush);
        	return Image;
        }


	ScrollBox->AddSlot()
		.HAlign(HAlign_Fill)
		.VAlign(VAlign_Fill)
		[
			SAssignNew(GridPanel, SGridPanel)
		];
DrawDebugLine(GetWorld(),CursorWorldPosition,CursorWorldHitLocation,FColor::Black,true,5);


UTexture2D* ARenderActor::CaptureRenderedTexture()
{
	// Set the render target on the scene capture component
	SceneCaptureComponent->TextureTarget = RenderTarget;

	// Disable capturing the skybox and background
	SceneCaptureComponent->CaptureSource = ESceneCaptureSource::SCS_SceneDepth;

	// Capture the scene by rendering
	SceneCaptureComponent->CaptureScene();

	// Create a new texture and copy the rendered image
	UTexture2D* RenderedTexture = UTexture2D::CreateTransient(RenderTarget->SizeX, RenderTarget->SizeY, PF_B8G8R8A8);
	FTexture2DMipMap& Mip = RenderedTexture->GetPlatformData()->Mips[0];
	void* Data = Mip.BulkData.Lock(LOCK_READ_WRITE);
	FIntRect Rect(0, 0, RenderTarget->SizeX, RenderTarget->SizeY);
	RenderTarget->GameThread_GetRenderTargetResource()->ReadPixelsPtr((FColor*)Data, FReadSurfaceDataFlags(), Rect);
	Mip.BulkData.Unlock();

	// Update the texture resource
	RenderedTexture->UpdateResource();

	// Save the texture as a PNG file
	//FString SavePath = FPaths::ProjectContentDir() + "Textures/RenderedTexture.png";
	//FImageUtils::ExportTexture2DToPNGFile(RenderedTexture, SavePath);
	//FImageUtils::ExportRenderTarget2DAsPNG()
	//FImageUtils::ExportRenderTarget2DAsPNG();
	//FFileHelper::SaveArrayToFile(FImageUtils::ExportRenderTarget2DAsPNG(RenderTarget,), *SavePath);

	// Save the render target as a PNG file
	FString SavePath = FPaths::ProjectContentDir() + "Textures/RenderedTexture.png";
	FArchive* Ar = IFileManager::Get().CreateFileWriter(*SavePath);
	if (Ar)
	{
		FImageUtils::ExportRenderTarget2DAsPNG(RenderTarget, *Ar);
		Ar->Close();
		delete Ar;
	}

	return RenderedTexture;
}

	UDataTable*DT;
	///Script/Engine.DataTable'/ProceduralGeneration/Data/DT_MeshProperty.DT_MeshProperty'
	FString AssetPath = FString::Printf(TEXT("ProceduralGeneration/Data/DT_MeshProperty.DT_MeshProperty"));
	//FString AssetPath = FString::Printf(TEXT("ProceduralGeneration/Data/%s.%s"), *DatTableName, *DatTableName);
	DT = Cast<UDataTable>(StaticLoadObject(UDataTable::StaticClass(), nullptr, *AssetPath));

	if(DT !=nullptr)
	{
		if(GEngine){GEngine->AddOnScreenDebugMessage(-1, 2.0f, FColor::Yellow, TEXT(" Data Import Succesfull"));}
	}

	return DT;
	
	//workling 
	
	UDataTable* UTopDownGameInstance::ImportData(const FString& DataTablePath)
    {
    //return   Cast<UDataTable>(StaticLoadObject(UDataTable::StaticClass(), nullptr, *DataTablePath));
    
    	FString AssetPath = FString::Printf(TEXT("/ProceduralGeneration/Data/%s.%s"), *SpawnableItemsDataTableName, *SpawnableItemsDataTableName);
    	//FString AssetPath = FString::Printf(TEXT("ProceduralGeneration/Data/DT_MeshProperty.DT_MeshProperty"));
    	//return   Cast<UDataTable>(StaticLoadObject(UDataTable::StaticClass(), nullptr, *DataTablePath));
    	return   Cast<UDataTable>(StaticLoadObject(UDataTable::StaticClass(), nullptr, *AssetPath));
    }
    
    
    void SBottomBuildingsPanel::CreateCards()
    {
    	// Create ImageTile widgets and add them to the array
    
    	for (USpawnable* ST : *S_Spawnables)
    	{
    		TSharedPtr<SBuildingCard> ImageTile = SNew(SBuildingCard);
    		//FLinearColor Color = FLinearColor::MakeRandomColor();
    		//ImageTile->SetBrush(Color);
    		ImageTile->SetBrush(ST->GetIcon());
    		ST->SetCard(ImageTile);
    		ImageTiles.Add(ImageTile);
    	}
    }
    
    /*	
    	SAssignNew(Overlay_1,SOverlay)
    	+ SOverlay::Slot()
    			.HAlign(HAlign_Center)
    			.VAlign(VAlign_Bottom) // Changed from VAlign_Center
    		[
    			SAssignNew(SizeBox_1_1,SBox)
    			.WidthOverride_Lambda([this]() -> float {
    			// Retrieve the current value of Size_BoxWidth attribute
    			return Size_BoxWidth;
    		})
    		/**.HeightOverride_Lambda([this]() -> float {
    			// Retrieve the current value of Size_BoxHeight attribute
    			return Size_BoxHeight;
    		})
    				[
    						SAssignNew(ScrollBox_1_1_1, SScrollBox)
    						.Orientation(Orient_Horizontal)
    						.ScrollBarAlwaysVisible(true)
    						.ScrollBarThickness(FVector2D(8.0f, 8.0f))
    						
    							+SScrollBox::Slot()
    								.HAlign(HAlign_Fill)
    								.VAlign(VAlign_Fill)
    							
    								[
    								SAssignNew(GridPanel_1_1_1_1, SGridPanel)
    								]
    						
    						
    				]
    		];
    
    	return Overlay_1.ToSharedRef();*/
    	
    	
    	void SBottomBuildingsPanel::CreateGridTile(TArray<TSharedPtr<SBuildingCard>>* inImageTiles)
        {
        	int32 NumRows = 2;
        	int32 TileIndex = 0;
        	for (int32 RowIndex = 0;RowIndex < NumRows; RowIndex++)
        	{
        		for (int32 ColumnIndex = 0; ColumnIndex < inImageTiles->Num() / NumRows ; ColumnIndex++)
        		{
        			BottomGridPanel->AddSlot(ColumnIndex, RowIndex)
        			.Padding(5.0f)
        			.HAlign(HAlign_Center)
        			.VAlign(VAlign_Center)
        			[
        				SNew(SBox)
        				.WidthOverride(50)
        				.HeightOverride(50)
        				[
        					(*inImageTiles)[TileIndex]->AsShared()
        				]
        			];
        
        			TileIndex++;
        		}
        	}
        }
        
        	//Instance = NewObject<ASpawnableActor>(GetTransientPackage(), TEXT("MyActorInstance"));
        	//Instance->Init_PostBeginPlay(Mesh,Mat_Interface,ID);
        	//Instance->SetActorHiddenInGame(true);